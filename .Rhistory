corr("specdata")
setwd("~/R/Coursera")
corr <- function(directory, threshold=150 ) {
result <- numeric(0)
allfiles <- list.files(directory, full = TRUE)
}
allfiles
corr("specdata")
setwd("~/R/Coursera")
corr <- function(directory, threshold=150 ) {
source("complete.R")
# get data from complete.R function-retrieved complete cases.
a <- complete("specdata")
# subset data in a by the threshold value
# b<-subset(a, nobs > threshold)
# b<-a[b$nobs>threshold,]
a<-a[a$nobs>threshold,]
i<-sprintf("%03d", as.numeric(a$id))
ev<-numeric()
for (i in a$id){
z<-read.csv(file.path(directory, paste(sprintf("%03d", i), ".csv", sep="")))
cd <- z[complete.cases(z),]
corsum<-cor(cd$sulfate, cd$nitrate)
cr <-c(ev,corsum)
#p<-append(ev,a$id)
}
# head(cd)
#fin
#cd
cr
#write.table(cd, "C:/Temp/Coursera/poo.txt", sep="\t")
}
corr("specdata")
setwd("~/R/Coursera")
corr <- function(directory, threshold=150 ) {
source("complete.R")
# get data from complete.R function-retrieved complete cases.
a <- complete("specdata")
# subset data in a by the threshold value
# b<-subset(a, nobs > threshold)
# b<-a[b$nobs>threshold,]
a<-a[a$nobs>threshold,]
i<-sprintf("%03d", as.numeric(a$id))
ev<-numeric()
for (i in a$id){
z<-read.csv(file.path(directory, paste(sprintf("%03d", i), ".csv", sep="")))
cd <- z[complete.cases(z),]
corsum<-cor(cd$sulfate, cd$nitrate)
cr <-c(ev,corsum)
#p<-append(ev,a$id)
}
# head(cd)
#fin
#cd
cr
#write.table(cd, "C:/Temp/Coursera/poo.txt", sep="\t")
}
corr("specdata")
library(datasets)
data iris
library(datasets)
data(iris)
?iris
i<-iris
View(i)
i<-iris(if species == "virginica")
i<- subset(iris, species == "virginica")
#i<-iris(if species == "virginica")
i<- subset(iris.species, species == "virginica")
View(iris)
library(datasets)
data(iris)
?iris
#i<-iris(if species == "virginica")
i<- subset(iris, Species == "virginica")
View(i)
k<-mean(Sepal.Length)
k<-mean(i,Sepal.Length)
#i<-iris(if species == "virginica")
i<- subset(iris, Species == "virginica")
poo<-i$Sepcal.Length
k<-mean(poo)
#i<-iris(if species == "virginica")
i<- subset(iris, Species == "virginica")
poo<-i$Sepcal.Length
k<-mean(poo, na.rm=TRUE)
i<- subset(iris, Species == "virginica")
poo<-i$Sepal.Length
k<-mean(poo, na.rm=TRUE)
i<- subset(iris, Species == "virginica")
poo<-i$Sepal.Length
k<-mean(poo, na.rm=TRUE)
k
#i<-iris(if species == "virginica")
i<- subset(iris, Species == "virginica")
poo<-i$Sepal.Length
k<-mean(poo)
k
x<-apply(iris, 2, mean)
x
x<-colMeans(iris)
x
x<-apply(iris[, 1:4], 2, mean)
x
x<-apply(i[, 1:4], 2, mean)
x
x<-apply(iris, 1, mean)
x
library(datasets)
data(mtcars)
View(mtcars)
v<-sapply(split(mtcars$mpg, mtcars$cyl), mean)
v
b<-mean(mtcars$mpg, mtcars$cyl)
n<-tapply(mtcars$cyl, mtcars$mpg, mean)
n
View(mtcars)
sub4<-(mtcars,cyl==4)
sub8<-(mtcars,cyl==8)
sub4<-subset(mtcars,cyl==4)
sub8<-subset(mtcars,cyl==8)
View(sub4)
View(sub8)
View(sub8)
mn4<-mean(sub4$hp)
mn4
View(sub4)
write.table(sub4, "C:/Temp/Coursera/sub4.txt", sep="\t")
sub4
write.table(sub4, "C:/Temp/Coursera/sub4.txt", sep="\t")
write.table(sub4, "~/sub4.txt", sep="\t")
mn4<-mean(sub4)
mn4
mn4<-mean(sub4$hp)
mn4
mn4<-mean(hp)
mn4
mn4<-sum(hp)
mn4<-sum(sub4$hp)
mn4
z<-sapply(split(mtcars$hp, mtcars$cyl), mean)
z
x<-tapply(mtcars$cyl, mtcars$mpg, mean)
x
z<-sapply(split(mtcars$hp, mtcars$cyl), mean)
z
z<-sapply(split(mtcars$hp, mtcars$cyl), mean)
z
c<-tapply(mtcars$cyl, mtcars$mpg, mean)
c
View(mtcars)
z<-sapply(split(mtcars$hp, mtcars$cyl), mean)
z
o<-lapply(i$Sepal.Length,mean)
o
s<-split(mtcars,mtcars$cyl)
lapply(s,function(x) colmeans(x[,c(mpg)]))
s<-split(mtcars,mtcars$cyl)
lapply(s,function(x) colmeans(x[,c(mpg)]))
s<-split(mtcars,mtcars$cyl)
lapply(s,function(x) colMeans(x[,c(mpg)]))
View(mtcars)
s<-split(mtcars,mtcars$cyl)
s
s<-split(mtcars,mtcars$cyl)
lapply(s,function(x) colMeans(x[,c("mpg"")]))
s<-split(mtcars,mtcars$cyl)
lapply(s,function(x) colMeans(x[,c("mpg"")]))
s
v<-lapply(s,function(x) colMeans(x[,c("mpg"")]))
v
s<-split(mtcars,mtcars$cyl)
v<-lapply(s,function(x) colMeans(x[,c("mpg"")]))
v
s<-split(mtcars,mtcars$cyl)
v<-lapply(s,function(x) colMeans(x[,c("mpg")]))
v
s<-split(mtcars,mtcars$cyl)
v<-lapply(s,function(x) colMeans(x[,c("mpg")]))
v
s<-split(mtcars,mtcars$cyl)
v<-lapply(s,function(x) colMeans(x[,c("hp")]))
v
s<-split(mtcars,mtcars$cyl)
v<-lapply(s,function(x) colMeans(x[,c("hp")]))
v
v<-lapply(split(mtcars,cyl),mean))
v
v<-lapply(split(mtcars,cyl),mean)
v
v<-lapply(split(mtcars,"cyl"),mean)
v
v<-lapply(split(mtcars$hp,"cyl"),mean)
v
v<-lapply(split(mtcars$hp,cyl),mean)
v
v<-lapply(split(cyl,mtcars$hp),mean)
v
v<-lapply(split("cyl",mtcars$hp),mean)
v
i<- subset(iris, Species == "virginica")
write.table(i, "~/i.txt", sep="\t")
poo<-i$Sepal.Length
k<-mean(poo)
k
v<-mean(iris$Sepal.Length [iris$Species == 'virginica'])
v
debug(ls)
ls
write.table(sub4, "~/sub4.txt", sep="\t")
write.table(sub8, "~/sub8.txt", sep="\t")
ls
ls
k<-mean(poo)
k
library(datasets)
data(iris)
?iris
#i<-iris(if species == "virginica")
i<- subset(iris, Species == "virginica")
poo<-i$Sepal.Length
k<-mean(poo)
k<-mean(poo)
k
x<-apply(iris, 1, mean)
x
setwd("~/R/datasciencecoursera/ProgrammingAssignment2")
##########################################################################
## Test
##########################################################################
##
## PREPARE ##########################
##provide a 3x3 matrix
m <- matrix(c(1,2,3,6,0,4,7,8,9),3,3)
#
#create a "cache"
cache <- makeCacheMatrix()
#
#set the matrix value of the cache
cache$setMatrix(m)
##
## CROSSCHECK #######################
##
#crosscheck 1: same matrix in cache than m?
mCache<-cache$getMatrix()
if(!identical(m, m2)) {
stop("Matrix is not the same")
}
#
#crosscheck 2: at this point the cached inverse must be null
iCache<-cache$getInvers()
if(!is.null(iCache)) {
stop("Inverse must be null")
}
##
## SOLVE ###########################
##
#now solve first time
s1 <- cacheSolve(cache)
#
#solve second time
s2 <- cacheSolve(cache)
#
#check: s1 and s2 should be identical
if(!identical(s1,s2)) {
stop("Both inverse computations must be the same")
}
#
#now cacheHits should be 1
hits <- cache$getCacheHits()
if(1!=hits){
stop("hits should be 1")
setwd("~/R/datasciencecoursera/ProgrammingAssignment2")
source("cachematrix.R")
setwd("~/R/datasciencecoursera/ProgrammingAssignment2")
source("cachematrix.R")
##provide a 3x3 matrix
m <- matrix(c(1,2,3,6,0,4,7,8,9),3,3)
#
#create a "cache"
cache <- cachematrix()
#
#set the matrix value of the cache
cache$setMatrix(m)
##
## CROSSCHECK #######################
##
#crosscheck 1: same matrix in cache than m?
mCache<-cache$getMatrix()
if(!identical(m, m2)) {
stop("Matrix is not the same")
}
#
#crosscheck 2: at this point the cached inverse must be null
iCache<-cache$getInvers()
if(!is.null(iCache)) {
stop("Inverse must be null")
}
##
## SOLVE ###########################
##
#now solve first time
s1 <- cacheSolve(cache)
#
#solve second time
s2 <- cacheSolve(cache)
#
#check: s1 and s2 should be identical
if(!identical(s1,s2)) {
stop("Both inverse computations must be the same")
}
#
#now cacheHits should be 1
hits <- cache$getCacheHits()
if(1!=hits){
stop("hits should be 1")
}
setwd("~/R/datasciencecoursera/ProgrammingAssignment2")
source("cachematrix.R")
##########################################################################
## Test
##########################################################################
##
## PREPARE ##########################
##provide a 3x3 matrix
m <- matrix(c(1,2,3,6,0,4,7,8,9),3,3)
#
#create a "cache"
cache <- cachematrix()
#
#set the matrix value of the cache
cache$setMatrix(m)
##
## CROSSCHECK #######################
##
#crosscheck 1: same matrix in cache than m?
mCache<-cache$getMatrix()
if(!identical(m, m2)) {
stop("Matrix is not the same")
}
#
#crosscheck 2: at this point the cached inverse must be null
iCache<-cache$getInvers()
if(!is.null(iCache)) {
stop("Inverse must be null")
}
##
## SOLVE ###########################
##
#now solve first time
s1 <- cacheSolve(cache)
#
#solve second time
s2 <- cacheSolve(cache)
#
#check: s1 and s2 should be identical
if(!identical(s1,s2)) {
stop("Both inverse computations must be the same")
}
#
#now cacheHits should be 1
hits <- cache$getCacheHits()
if(1!=hits){
stop("hits should be 1")
}
mCache
setwd("~/R/datasciencecoursera/ProgrammingAssignment2")
source("cachematrix.R")
##########################################################################
## Test
##########################################################################
##
## PREPARE ##########################
##provide a 3x3 matrix
m <- matrix(c(1,2,3,6,0,4,7,8,9),3,3)
#
#create a "cache"
cache <- cachematrix()
#
#set the matrix value of the cache
cache$setMatrix(m)
##
## CROSSCHECK #######################
##
#crosscheck 1: same matrix in cache than m?
mCache<-cache$getMatrix()
if(!identical(m, m2)) {
stop("Matrix is not the same")
}
#
#crosscheck 2: at this point the cached inverse must be null
iCache<-cache$getInvers()
if(!is.null(iCache)) {
stop("Inverse must be null")
}
##
## SOLVE ###########################
##
#now solve first time
s1 <- cacheSolve(cache)
#
#solve second time
s2 <- cacheSolve(cache)
#
#check: s1 and s2 should be identical
if(!identical(s1,s2)) {
stop("Both inverse computations must be the same")
}
#
#now cacheHits should be 1
hits <- cache$getCacheHits()
if(1!=hits){
stop("hits should be 1")
mCache
}
setwd("~/R/datasciencecoursera/ProgrammingAssignment2")
source("cachematrix.R")
##########################################################################
## Test
##########################################################################
##
## PREPARE ##########################
##provide a 3x3 matrix
m <- matrix(c(1,2,3,6,0,4,7,8,9),3,3)
#
#create a "cache"
cache <- cachematrix()
#
#set the matrix value of the cache
cache$setMatrix(m)
##
## CROSSCHECK #######################
##
#crosscheck 1: same matrix in cache than m?
mCache<-cache$getMatrix()
if(!identical(m, m2)) {
stop("Matrix is not the same")
}
#
#crosscheck 2: at this point the cached inverse must be null
iCache<-cache$getInvers()
if(!is.null(iCache)) {
stop("Inverse must be null")
}
##
## SOLVE ###########################
##
#now solve first time
s1 <- cacheSolve(cache)
#
#solve second time
s2 <- cacheSolve(cache)
#
#check: s1 and s2 should be identical
if(!identical(s1,s2)) {
stop("Both inverse computations must be the same")
}
#
#now cacheHits should be 1
hits <- cache$getCacheHits()
if(1!=hits){
stop("hits should be 1")
}
mCache
#
#create a "cache"
cache <- makeCacheMatrix()
cache
##provide a 3x3 matrix
m <- matrix(c(1,2,3,6,0,4,7,8,9),3,3)
#
#create a "cache"
cache <- makeCacheMatrix()
#
#set the matrix value of the cache
cache$setMatrix(m)
##
## CROSSCHECK #######################
##
#crosscheck 1: same matrix in cache than m?
mCache<-cache$getMatrix()
if(!identical(m, m2)) {
stop("Matrix is not the same")
}
#
#crosscheck 2: at this point the cached inverse must be null
iCache<-cache$getInvers()
if(!is.null(iCache)) {
stop("Inverse must be null")
}
##
## SOLVE ###########################
##
#now solve first time
s1 <- cacheSolve(cache)
#
#solve second time
s2 <- cacheSolve(cache)
#
#check: s1 and s2 should be identical
if(!identical(s1,s2)) {
stop("Both inverse computations must be the same")
}
#
#now cacheHits should be 1
hits <- cache$getCacheHits()
if(1!=hits){
stop("hits should be 1")
}
s2
m <- matrix(c(1,2,3,6,0,4,7,8,9),3,3)
m
